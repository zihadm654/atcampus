// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// ============================================================================
// ENUMS - Consolidated and consistent
// ============================================================================

enum UserRole {
  STUDENT
  PROFESSOR
  INSTITUTION
  ORGANIZATION
  ADMIN
}

enum UserStatus {
  PENDING
  ACTIVE
  SUSPENDED
  REJECTED
}

enum CourseStatus {
  DRAFT // Course is being created, not yet submitted for review
  UNDER_REVIEW // Course has been submitted and is pending review
  PUBLISHED // Course is approved and visible to students
  ARCHIVED // Course is no longer active but kept for records
  REJECTED // Course has been reviewed and rejected
  NEEDS_REVISION // Course requires changes before re-submission
}

enum EnrollmentStatus {
  PENDING
  ENROLLED
  ACTIVE
  COMPLETED
  DROPPED
  SUSPENDED
}

enum ApplicationStatus {
  PENDING
  UNDER_REVIEW
  ACCEPTED
  REJECTED
  WITHDRAWN
}

enum CollaborationStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
}

enum NotificationType {
  LIKE
  FOLLOW
  COMMENT
  POST
  JOB_APPLICATION
  COURSE_ENROLLMENT
  RESEARCH_COLLABORATION
  SYSTEM_ANNOUNCEMENT
  PROFESSOR_INVITATION
  COURSE_APPROVAL_REQUEST
  COURSE_APPROVAL_RESULT
}

enum MediaType {
  IMAGE
  VIDEO
  PDF
  DOCUMENT
  AUDIO
}

enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum JobType {
  FULL_TIME
  PART_TIME
  INTERNSHIP
  CONTRACT
  RESEARCH_ASSISTANT
}

enum ExperienceLevel {
  ENTRY_LEVEL
  MID_LEVEL
  SENIOR_LEVEL
  EXECUTIVE
}

enum EventStatus {
  DRAFT
  PUBLISHED
  CANCELLED
  COMPLETED
}

enum EventType {
  WORKSHOP
  SEMINAR
  CONFERENCE
  NETWORKING
  SOCIAL
  COMPETITION
  WEBINAR
  OTHER
}

enum ClubType {
  ACADEMIC
  SPORTS
  CULTURAL
  TECHNICAL
  SOCIAL
  HOBBY
  PROFESSIONAL
  OTHER
}

enum ClubMemberRole {
  PRESIDENT
  VICE_PRESIDENT
  SECRETARY
  TREASURER
  MEMBER
  ADVISOR
}

enum AttendanceStatus {
  REGISTERED
  ATTENDED
  CANCELLED
  NO_SHOW
}

// ============================================================================
// AUTHENTICATION & SESSION MODELS
// ============================================================================

model Account {
  id     String @id @default(cuid()) @map("_id")
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Better Auth fields
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@index([userId])
  @@index([providerId, accountId])
  @@map("accounts")
}

model Session {
  id        String   @id @default(cuid()) @map("_id")
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String   @unique
  expiresAt DateTime

  // Session metadata
  ipAddress      String?
  userAgent      String?
  impersonatedBy String?

  // Active context - Better Auth organization plugin fields
  activeOrganizationId String?

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@index([userId])
  @@index([expiresAt])
  @@map("sessions")
}

model Verification {
  id         String   @id @default(cuid()) @map("_id")
  identifier String
  value      String
  expiresAt  DateTime

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@index([identifier])
  @@index([value])
  @@map("verifications")
}

model TwoFactor {
  id          String @id @default(cuid()) @map("_id")
  userId      String @unique
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  secret      String
  backupCodes String

  @@index([secret])
  @@map("twoFactor")
}

// ============================================================================
// CORE USER & ORGANIZATION MODELS
// ============================================================================

model User {
  id              String  @id @default(cuid()) @map("_id")
  email           String  @unique
  emailVerified   Boolean @default(false)
  name            String
  username        String? @unique
  displayUsername String?
  image           String?
  coverImage      String?
  bio             String?
  instituteId     String?
  institution     String?
  phone           String?

  // Academic info
  currentSemester Int?
  graduationYear  Int?

  // System fields
  role             UserRole   @default(STUDENT)
  twoFactorEnabled Boolean?   @default(false)
  status           UserStatus @default(PENDING)

  // Moderation
  banned     Boolean?  @default(false)
  banReason  String?
  banExpires DateTime?

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  // Authentication
  accounts   Account[]
  sessions   Session[]
  twoFactors TwoFactor[]

  // Social features
  posts     Post[]
  comments  Comment[]
  likes     Like[]
  bookmarks Bookmark[]
  followers Follow[]   @relation("UserFollowers")
  following Follow[]   @relation("UserFollowing")
  block     Block[]    @relation("BlocksSent")
  blockBy   Block[]    @relation("BlocksReceived")

  // Notifications
  receivedNotifications Notification[] @relation("Recipient")
  issuedNotifications   Notification[] @relation("Issuer")

  // Professional
  jobs                    Job[]
  applications            Application[]
  savedJobs               SavedJob[]
  research                Research[]
  savedResearch           SavedResearch[]
  collaborationRequests   CollaborationRequest[] @relation("CollaborationRequester")
  collaboratedResearch    Research[]             @relation("ResearchCollaborators", fields: [collaboratedResearchIds], references: [id])
  collaboratedResearchIds String[]

  // Academic profile
  education         Education[]
  experience        Experience[]
  userSkills        UserSkill[]
  skillEndorsements SkillEndorsement[]

  // Institutional
  members     Member[]
  invitations Invitation[]
  schools     School[]

  // Course management - simplified relationships
  primaryCourses    Course[]           @relation("PrimaryCourseInstructor")
  additionalCourses CourseInstructor[] @relation("AdditionalCourseInstructors")
  enrollments       Enrollment[]
  courseReviews     CourseApproval[]   @relation("CourseReviewer")

  // Events & clubs
  events         Event[]
  clubs          Club[]
  eventAttendees EventAttendee[]
  eventLikes     EventLike[]
  clubMembers    ClubMember[]
  clubLikes      ClubLike[]
  notification   Notification[]

  // Audit trail
  auditActions AuditLog[] @relation("AuditActor")

  @@index([role, status])
  @@index([status, createdAt])
  @@index([instituteId, role]) // For institution queries
  @@map(name: "users")
}

model Organization {
  id          String  @id @default(cuid()) @map("_id")
  name        String
  slug        String  @unique
  logo        String?
  description String?
  website     String?
  isActive    Boolean @default(true)

  // Better Auth organization plugin fields
  metadata  Json? // For custom fields
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  members     Member[]
  invitations Invitation[]
  clubs       Club[]
  events      Event[]

  @@index([name])
  @@map(name: "organizations")
}

model Member {
  id             String       @id @default(cuid()) @map("_id")
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  facultyId      String?
  faculty        Faculty?     @relation(fields: [facultyId], references: [id])

  // Better Auth organization plugin fields
  role        String @default("member") // Better Auth role field
  permissions Json? // Better Auth permissions field

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@unique([userId, organizationId])
  @@index([organizationId, role])
  @@index([facultyId, role])
  @@map(name: "members")
}

// Production-grade invitation model with audit trail
model Invitation {
  id             String       @id @default(cuid()) @map("_id")
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  inviterId      String
  inviter        User         @relation(fields: [inviterId], references: [id], onDelete: Cascade)

  // Better Auth organization plugin fields
  email     String
  role      String   @default("member") // Better Auth role field
  status    String   @default("pending") // Better Auth status field
  expiresAt DateTime

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  notifications Notification[]

  @@index([status, expiresAt]) // For cleanup jobs
  @@map(name: "invitations")
}

// Removed - functionality merged into unified Invitation model

// ============================================================================
// ACADEMIC STRUCTURE MODELS
// ============================================================================

model School {
  id          String  @id @default(cuid()) @map("_id")
  name        String
  shortName   String?
  slug        String
  description String?
  logo        String?
  coverPhoto  String?
  website     String?
  isActive    Boolean @default(true)

  institutionId String
  institution   User   @relation(fields: [institutionId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  faculties Faculty[]
  courses   Course[]

  @@unique([slug, institutionId])
  @@unique([name, institutionId])
  @@index([institutionId, isActive])
  @@map(name: "schools")
}

model Faculty {
  id          String  @id @default(cuid()) @map("_id")
  name        String
  shortName   String?
  slug        String
  description String?
  logo        String?
  coverPhoto  String?
  website     String?
  isActive    Boolean @default(true)

  schoolId String
  school   School @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  courses Course[]
  members Member[]
  clubs   Club[]

  @@unique([slug, schoolId])
  @@unique([name, schoolId])
  @@index([schoolId, isActive])
  @@map(name: "faculties")
}

// ============================================================================
// COURSE MANAGEMENT MODELS
// ============================================================================

// Production-grade course model with comprehensive features
model Course {
  id          String  @id @default(cuid()) @map("_id")
  code        String  @db.String // Enforce length limit
  title       String  @db.String
  description String  @db.String
  department  String?
  credits     Int?    @default(3)
  maxStudents Int?
  minStudents Int?    @default(1)

  // Course metadata
  objectives     String[] @default([])
  outcomes       String[] @default([])
  keywords       String[] @default([]) // For search
  difficulty     String?  @default("BEGINNER") // BEGINNER, INTERMEDIATE, ADVANCED
  estimatedHours Int? // Total course hours

  // Scheduling
  startDate DateTime?
  endDate   DateTime?
  semester  String?
  year      Int?

  // Status and approval tracking
  status     CourseStatus @default(DRAFT)
  isArchived Boolean      @default(false)

  // Academic context with constraints
  facultyId String
  faculty   Faculty @relation(fields: [facultyId], references: [id], onDelete: Cascade)

  // Adding school relationship for better navigation
  schoolId String
  school   School @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  // Primary instructor (course owner)
  instructorId String
  instructor   User   @relation("PrimaryCourseInstructor", fields: [instructorId], references: [id], onDelete: Cascade)

  // Audit fields
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  // Soft delete
  deletedAt DateTime?
  isDeleted Boolean   @default(false)

  // Version control
  version    Int     @default(1)
  previousId String? // Reference to previous version

  // Related models
  enrollments       Enrollment[]
  announcements     CourseAnnouncement[]
  materials         CourseMaterial[]
  instructorCourses CourseInstructor[]
  approvals         CourseApproval[]
  notifications     Notification[]
  jobs              Job[]

  @@unique([code, facultyId, isDeleted]) // Prevent duplicate active courses
  @@index([facultyId, status, isDeleted])
  @@index([instructorId, status, isDeleted])
  @@index([status, isDeleted, startDate])
  @@index([keywords]) // For search functionality
  @@index([semester, year, facultyId]) // Academic calendar queries
  @@index([schoolId, status]) // For school-based queries
  @@map(name: "courses")
}

// Junction table for multiple course instructors
model CourseInstructor {
  id           String @id @default(cuid()) @map("_id")
  courseId     String
  course       Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  instructorId String
  instructor   User   @relation("AdditionalCourseInstructors", fields: [instructorId], references: [id], onDelete: Cascade)

  role     String   @default("CO_INSTRUCTOR") // CO_INSTRUCTOR, TEACHING_ASSISTANT, GUEST_LECTURER
  addedAt  DateTime @default(now())
  isActive Boolean  @default(true)

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@unique([courseId, instructorId])
  @@index([instructorId, isActive])
  @@index([courseId, role])
  @@map(name: "course_instructors")
}

model Enrollment {
  id        String @id @default(cuid()) @map("_id")
  courseId  String
  course    Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  studentId String
  student   User   @relation(fields: [studentId], references: [id], onDelete: Cascade)

  status      EnrollmentStatus @default(PENDING)
  enrolledAt  DateTime?
  completedAt DateTime?
  grade       String?

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@unique([courseId, studentId])
  @@index([studentId, status])
  @@index([courseId, status])
  @@index([createdAt])
  @@map(name: "enrollments")
}

model CourseAnnouncement {
  id       String @id @default(cuid()) @map("_id")
  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  title    String
  content  String
  priority String @default("normal") // normal, important, urgent

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@index([courseId, createdAt])
  @@map(name: "course_announcements")
}

model CourseMaterial {
  id       String @id @default(cuid()) @map("_id")
  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  title   String
  type    String // document, video, link, etc.
  content String?
  fileUrl String?
  fileKey String?
  order   Int     @default(0)

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@index([courseId, order])
  @@map("course_materials")
}

// Production-grade course approval model with comprehensive workflow
model CourseApproval {
  id         String @id @default(cuid()) @map("_id")
  courseId   String
  course     Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  reviewerId String
  reviewer   User   @relation("CourseReviewer", fields: [reviewerId], references: [id], onDelete: Cascade)

  // Unified approval status
  status      CourseStatus @default(UNDER_REVIEW)
  comments    String? // Review comments
  reviewedAt  DateTime? // When the review was completed
  submittedAt DateTime     @default(now()) // When submitted for approval

  // Quality scores
  qualityScore         Int?
  contentQualityScore  Int?
  pedagogyQualityScore Int?

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@index([reviewerId, status])
  @@index([status, submittedAt])
  @@map("course_approvals")
}

// Production audit trail for compliance and tracking
model AuditLog {
  id String @id @default(cuid()) @map("_id")

  // Action details
  action     String // CREATE, UPDATE, DELETE, APPROVE, REJECT, etc.
  entityType String // Course, Invitation, User, etc.
  entityId   String // ID of the affected entity

  // Actor information
  userId    String?
  user      User?   @relation("AuditActor", fields: [userId], references: [id])
  sessionId String?
  ipAddress String?
  userAgent String?

  // Change details
  previousData String? // JSON snapshot before change
  newData      String? // JSON snapshot after change
  changes      String? // Specific fields changed

  // Context
  reason   String? // Reason for the change
  source   String? // API, UI, SYSTEM, etc.
  metadata String? // Additional context as JSON

  // Compliance
  timestamp DateTime @default(now())

  @@index([entityType, entityId])
  @@index([userId, timestamp])
  @@index([action, entityType])
  @@index([timestamp]) // For time-based queries
  @@map("audit_logs")
}

// Removed - functionality consolidated into CourseApproval model

// ============================================================================
// SOCIAL & CONTENT MODELS
// ============================================================================

model Post {
  id     String @id @default(cuid()) @map("_id")
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  content String

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  comments      Comment[]
  likes         Like[]
  bookmarks     Bookmark[]
  attachments   Media[]
  notifications Notification[]

  @@index([userId, createdAt])
  @@index([createdAt])
  @@map(name: "posts")
}

model Comment {
  id     String @id @default(cuid()) @map("_id")
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  content String

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@index([postId, createdAt])
  @@index([userId])
  @@map(name: "comments")
}

model Like {
  id     String @id @default(cuid()) @map("_id")
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@unique([postId, userId])
  @@index([userId])
  @@map(name: "likes")
}

model Bookmark {
  id     String @id @default(cuid()) @map("_id")
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@unique([postId, userId])
  @@index([userId, createdAt])
  @@map(name: "bookmarks")
}

model Follow {
  id          String @id @default(cuid()) @map("_id")
  followerId  String
  follower    User   @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade)
  followingId String
  following   User   @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([followerId, followingId])
  @@index([followingId])
  @@map(name: "follows")
}

model Block {
  id        String @id @default(cuid()) @map("_id")
  blockerId String
  blocker   User   @relation("BlocksSent", fields: [blockerId], references: [id], onDelete: Cascade)
  blockedId String
  blocked   User   @relation("BlocksReceived", fields: [blockedId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@unique([blockerId, blockedId])
  @@index([blockedId])
  @@map(name: "blocks")
}

model Media {
  id       String    @id @default(cuid()) @map("_id")
  type     MediaType
  url      String
  fileKey  String?
  fileSize Int?
  fileName String?

  // Polymorphic relationships
  postId     String?
  post       Post?     @relation(fields: [postId], references: [id], onDelete: Cascade)
  researchId String?
  research   Research? @relation(fields: [researchId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@index([postId])
  @@index([researchId])
  @@map(name: "post_media")
}

// ============================================================================
// PROFESSIONAL & CAREER MODELS
// ============================================================================

model Job {
  id       String  @id @default(cuid()) @map("_id")
  userId   String
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId String?
  course   Course? @relation(fields: [courseId], references: [id])

  title        String
  description  String
  summary      String?
  requirements String[]

  // Job details
  type            JobType         @default(FULL_TIME)
  experienceLevel ExperienceLevel @default(ENTRY_LEVEL)
  salary          Float
  location        String
  weeklyHours     Int
  duration        Int? // in months

  // Dates
  startDate DateTime?
  endDate   DateTime

  isActive Boolean @default(true)

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  applications  Application[]
  savedJobs     SavedJob[]
  notifications Notification[]

  @@index([userId, isActive])
  @@index([type, experienceLevel])
  @@index([endDate, isActive])
  @@index([courseId])
  @@map(name: "jobs")
}

model Application {
  id          String @id @default(cuid()) @map("_id")
  jobId       String
  job         Job    @relation(fields: [jobId], references: [id], onDelete: Cascade)
  applicantId String
  applicant   User   @relation(fields: [applicantId], references: [id], onDelete: Cascade)

  status      ApplicationStatus @default(PENDING)
  coverLetter String?
  resume      String? // File URL

  appliedAt  DateTime  @default(now())
  reviewedAt DateTime?

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@unique([jobId, applicantId])
  @@index([applicantId, status])
  @@index([jobId, status])
  @@map(name: "applications")
}

model SavedJob {
  id     String @id @default(cuid()) @map("_id")
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobId  String
  job    Job    @relation(fields: [jobId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@unique([userId, jobId])
  @@index([userId, createdAt])
  @@map(name: "saved_jobs")
}

// ============================================================================
// RESEARCH & COLLABORATION MODELS
// ============================================================================

model Research {
  id     String @id @default(cuid()) @map("_id")
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  title       String
  description String
  field       String?
  keywords    String[]

  isActive Boolean @default(true)

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  attachments           Media[]
  savedResearch         SavedResearch[]
  collaborationRequests CollaborationRequest[]
  collaborators         User[]                 @relation("ResearchCollaborators", fields: [collaboratorIds], references: [id])
  collaboratorIds       String[]
  notifications         Notification[]

  @@index([userId, isActive])
  @@index([field])
  @@index([createdAt])
  @@map(name: "researches")
}

model CollaborationRequest {
  id          String   @id @default(cuid()) @map("_id")
  researchId  String
  research    Research @relation(fields: [researchId], references: [id], onDelete: Cascade)
  requesterId String
  requester   User     @relation("CollaborationRequester", fields: [requesterId], references: [id], onDelete: Cascade)

  message String?
  status  CollaborationStatus @default(PENDING)

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@unique([researchId, requesterId])
  @@index([requesterId, status])
  @@index([researchId, status])
  @@map(name: "collaboration_requests")
}

model SavedResearch {
  id         String   @id @default(cuid()) @map("_id")
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  researchId String
  research   Research @relation(fields: [researchId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@unique([userId, researchId])
  @@index([userId, createdAt])
  @@map(name: "saved_researches")
}

// ============================================================================
// SKILLS & PROFESSIONAL PROFILE MODELS
// ============================================================================

model Skill {
  id       String  @id @default(cuid()) @map("_id")
  name     String  @unique
  category String?

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  userSkills        UserSkill[]
  skillEndorsements SkillEndorsement[]

  @@index([category])
  @@map(name: "skills")
}

model UserSkill {
  id      String @id @default(cuid()) @map("_id")
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  skillId String
  skill   Skill  @relation(fields: [skillId], references: [id], onDelete: Cascade)

  title             String
  level             SkillLevel
  yearsOfExperience Int        @default(0)
  description       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  endorsements SkillEndorsement[]

  @@unique([userId, skillId])
  @@index([userId])
  @@index([skillId, level])
  @@map(name: "user_skills")
}

model SkillEndorsement {
  id          String    @id @default(cuid()) @map("_id")
  userSkillId String
  userSkill   UserSkill @relation(fields: [userSkillId], references: [id], onDelete: Cascade)
  endorserId  String
  endorser    User      @relation(fields: [endorserId], references: [id], onDelete: Cascade)
  skillId     String
  skill       Skill     @relation(fields: [skillId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userSkillId, endorserId])
  @@index([endorserId])
  @@map(name: "skill_endorsements")
}

model Education {
  id     String @id @default(cuid()) @map("_id")
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  institution String
  degree      String
  field       String
  startDate   DateTime
  endDate     DateTime?
  grade       String?
  description String?

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@index([userId, startDate])
  @@map(name: "education")
}

model Experience {
  id     String @id @default(cuid()) @map("_id")
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  title       String
  company     String
  location    String?
  type        String // Full-time, Part-time, Internship, etc.
  startDate   DateTime
  endDate     DateTime?
  current     Boolean   @default(false)
  description String?

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@index([userId, startDate])
  @@map(name: "experiences")
}

// ============================================================================
// NOTIFICATION SYSTEM
// ============================================================================

model Notification {
  id          String @id @default(cuid()) @map("_id")
  recipientId String
  recipient   User   @relation("Recipient", fields: [recipientId], references: [id], onDelete: Cascade)
  issuerId    String
  issuer      User   @relation("Issuer", fields: [issuerId], references: [id], onDelete: Cascade)

  type    NotificationType
  title   String?
  message String?
  read    Boolean          @default(false)

  // Polymorphic references
  postId       String?
  post         Post?       @relation(fields: [postId], references: [id], onDelete: Cascade)
  jobId        String?
  job          Job?        @relation(fields: [jobId], references: [id], onDelete: Cascade)
  researchId   String?
  research     Research?   @relation(fields: [researchId], references: [id], onDelete: Cascade)
  courseId     String?
  course       Course?     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  invitationId String?
  invitation   Invitation? @relation(fields: [invitationId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  @@index([recipientId, read, createdAt])
  @@index([type, createdAt])
  @@map(name: "notifications")
}

// ============================================================================
// EVENTS & CLUBS
// ============================================================================

model Event {
  id        String @id @default(cuid()) @map("_id")
  creatorId String
  creator   User   @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  name         String
  description  String
  location     String
  startDate    DateTime
  endDate      DateTime?
  coverPhoto   String?
  maxAttendees Int?

  // Enhanced fields
  shortDescription String? // For cards and previews
  eventType        EventType   @default(OTHER)
  status           EventStatus @default(DRAFT)
  isPublic         Boolean     @default(true)
  isFree           Boolean     @default(true)
  price            Float?
  currency         String?     @default("USD")

  // Location details
  venue      String?
  address    String?
  city       String?
  country    String?
  onlineLink String?
  isOnline   Boolean @default(false)

  // Contact and organization
  contactEmail   String?
  contactPhone   String?
  website        String?
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: SetNull)

  // Timestamps
  registrationDeadline DateTime?
  cancellationDeadline DateTime?

  // Engagement
  views  Int @default(0)
  likes  Int @default(0)
  shares Int @default(0)

  // Notification tracking
  reminderSent Boolean @default(false)

  isActive Boolean @default(true)

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  // Relations
  attendees  EventAttendee[]
  likesUsers EventLike[]
  clubEvents ClubEvent[]

  @@index([creatorId, isActive])
  @@index([startDate, isActive])
  @@index([status, isPublic, startDate])
  @@index([organizationId, status])
  @@map(name: "events")
}

model EventAttendee {
  id      String @id @default(cuid()) @map("_id")
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  eventId String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  status       AttendanceStatus @default(REGISTERED)
  registeredAt DateTime         @default(now())
  attendedAt   DateTime?

  // Additional fields
  ticketNumber String?
  notes        String?

  @@unique([userId, eventId])
  @@index([eventId, status])
  @@index([userId, registeredAt])
  @@map(name: "event_attendees")
}

model EventLike {
  id      String @id @default(cuid()) @map("_id")
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  eventId String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, eventId])
  @@index([eventId])
  @@index([userId, createdAt])
  @@map(name: "event_likes")
}

model Club {
  id        String @id @default(cuid()) @map("_id")
  creatorId String
  creator   User   @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  name        String
  description String
  coverPhoto  String?

  // Enhanced fields
  shortDescription String? // For cards and previews
  clubType         ClubType   @default(ACADEMIC)
  status           ClubStatus @default(ACTIVE)
  isPublic         Boolean    @default(true)

  // Contact and organization
  contactEmail String?
  contactPhone String?
  website      String?
  socialLinks  Json? // Store social media links as JSON

  // Organization details
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: SetNull)
  facultyId      String?
  faculty        Faculty?      @relation(fields: [facultyId], references: [id], onDelete: SetNull)

  // Meeting details
  meetingFrequency String? // Weekly, Monthly, etc.
  meetingDay       String? // Monday, Tuesday, etc.
  meetingTime      String? // 14:00, etc.
  meetingLocation  String?

  // Membership limits
  maxMembers    Int?
  membershipFee Float?
  currency      String? @default("USD")

  // Engagement
  views  Int @default(0)
  likes  Int @default(0)
  shares Int @default(0)

  isActive Boolean @default(true)

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  // Relations
  members    ClubMember[]
  events     ClubEvent[]
  likesUsers ClubLike[]

  @@index([creatorId, isActive])
  @@index([name])
  @@index([organizationId, status])
  @@index([facultyId, status])
  @@map(name: "clubs")
}

enum ClubStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

model ClubMember {
  id     String @id @default(cuid()) @map("_id")
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  clubId String
  club   Club   @relation(fields: [clubId], references: [id], onDelete: Cascade)

  role     ClubMemberRole @default(MEMBER)
  joinedAt DateTime       @default(now())
  isActive Boolean        @default(true)

  // Additional fields
  position String? // Custom position title
  bio      String? // Member bio within club context

  @@unique([userId, clubId])
  @@index([clubId, role])
  @@index([userId, joinedAt])
  @@map(name: "club_members")
}

model ClubEvent {
  id      String @id @default(cuid()) @map("_id")
  clubId  String
  club    Club   @relation(fields: [clubId], references: [id], onDelete: Cascade)
  eventId String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  isFeatured Boolean  @default(false)
  createdAt  DateTime @default(now())

  @@unique([clubId, eventId])
  @@index([clubId, isFeatured])
  @@index([eventId])
  @@map(name: "club_events")
}

model ClubLike {
  id     String @id @default(cuid()) @map("_id")
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  clubId String
  club   Club   @relation(fields: [clubId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, clubId])
  @@index([clubId])
  @@index([userId, createdAt])
  @@map(name: "club_likes")
}
